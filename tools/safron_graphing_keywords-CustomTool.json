{
  "name": "safron_graphing_keywords",
  "description": "Retrieve keyword data to graph, broken down by a specific period (daily, weekly, monthly, quarterly, or yearly). Set the keyword you are interested in and the period and get the mentions, sentiment and engagement numbers broken down by days so you can graph its progression over time. Only query ONE keyword at a time.",
  "color": "linear-gradient(rgb(80,143,62), rgb(104,171,92))",
  "iconSrc": "",
  "schema": "[{\"id\":0,\"property\":\"period\",\"description\":\"The period for which you want to fetch keyword data. Accepted values are daily, weekly, monthly, quarterly, or yearly. Example: \\\"weekly\\\"\",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"keyword\",\"description\":\"The keyword for which you want the data returned. Example: \\\"Elon Musk\\\"\",\"type\":\"string\",\"required\":true},{\"id\":2,\"property\":\"sort\",\"description\":\"Sort as \\\"top\\\" or as \\\"trending\\\", default is \\\"trending\\\"\",\"type\":\"string\",\"required\":false},{\"id\":3,\"property\":\"limit\",\"description\":\"Limit the number of keywords returned if a category is set. The default is 10. Example: 10\",\"type\":\"number\",\"required\":false}]",
  "func": "const fetch = require('node-fetch');\n\n// Define the API endpoint\nconst apiUrl = 'https://public.api.safron.io/v2/graph';\n\n// Set up the query parameters based on the input schema\nlet queryParams = `period=${$period}&search=${encodeURIComponent($keyword)}`;\n\n// Optional parameters\nif ($limit) queryParams += `&limit=${$limit}`;\nif ($sort) queryParams += `&sort=${$sort}`;\n\n// Construct the full URL with query parameters\nconst url = `${apiUrl}?${queryParams}`;\n\ntry {\n    // Make the API request\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    // Check if the response is OK (status code 200)\n    if (!response.ok) {\n        throw new Error('Failed to fetch graphing data');\n    }\n\n    // Parse the response JSON\n    const result = await response.json();\n\n    // Return the fetched graphing data\n    return JSON.stringify(result);\n\n} catch (error) {\n    console.error('Error fetching graphing data:', error);\n    return `Error: ${error.message}`;\n}"
}
