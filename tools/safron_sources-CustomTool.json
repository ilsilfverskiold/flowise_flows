{
  "name": "safron_sources",
  "description": "Retrieve sources based on ONE keyword and a period. ",
  "color": "linear-gradient(rgb(30,224,220), rgb(231,47,14))",
  "iconSrc": "",
  "schema": "[{\"id\":0,\"property\":\"keyword\",\"description\":\"Provide a string of the keyword you need sources for. Example: \\\"OpenAI\\\" \",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"period\",\"description\":\"Provide a string with the period 'daily', 'weekly','monthly','quarterly' or 'none'\",\"type\":\"string\",\"required\":true}]",
  "func": "const fetch = require('node-fetch');\n\nconst apiUrl = 'https://public.api.safron.io/v2/sources';\n\nlet payload = {};\nif ($keyword) payload.search = $keyword;\n\nconst url = `${apiUrl}?period=${$period}&limit=50`;\n\ntry {\n        const result = await makeApiRequest(payload, url);\n        return JSON.stringify(result);\n} catch (error) {\n        console.warn('Initial request failed, retrying with keywords array...', error.message);\n        if ($keyword) payload = { keywords: [$keyword] };\n        try {\n            const retryResult = await makeApiRequest(payload, url);\n            return JSON.stringify(retryResult);\n        } catch (retryError) {\n            console.error('Retry failed:', retryError.message);\n            return `Error: ${retryError.message}`;\n        }\n}\n\nasync function makeApiRequest(payload, url) {\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n    });\n\n    if (!response.ok) {\n        throw new Error(`Failed to fetch sources. URL: ${url} Payload: ${JSON.stringify(payload)}`);\n    }\n\n    return await response.json();\n}"
}
